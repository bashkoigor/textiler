title = "Catalog"
layout = "default"

url = "/catalog/:category*/:slug?"
is_hidden = 0

[CategoryPage MainCategoryPage]
slug = "{{ :category }}"
slug_required = 1
smart_url_check = 1
has_wildcard = 1
skip_error = 0

[CategoryPage]
slug = "{{ :slug }}"
slug_required = 0
smart_url_check = 1
has_wildcard = 0
skip_error = 1

[ProductList]
sorting = "price|asc|EUR"

[FilterPanel]
[Catalog]

[Pagination]
available_count_per_page = 12
count_per_page = 12
pagination_limit = 3
active_class = "active"
button_list = "first,prev,main,next,last"
first_button_name = "<"
first_button_limit = 3
first-more_button_name = "..."
first-more_button_limit = 1
prev_button_name = "Anterior"
prev_button_limit = 1
prev-more_button_name = "..."
prev-more_button_limit = 1
next-more_button_name = "..."
next-more_button_limit = 1
next_button_name = "PrÃ³ximo"
next_button_limit = 1
last-more_button_name = "..."
last-more_button_limit = 1
last_button_name = ">"
last_button_limit = 3
==
function onInit() {
$obMainCategoryItem = $this->MainCategoryPage->get();
$obCategoryItem = $this->CategoryPage->get();
$iPage = $this->Pagination->getPageFromRequest();
$sActiveSorting = $this->ProductList->getSorting();

if (empty($obCategoryItem)) {
    $obCategory = $obMainCategoryItem;
    $obProductList = $this->ProductList->make()->active()->sort($sActiveSorting)->category($obMainCategoryItem->id, true);
} else {
    $obCategory = $obCategoryItem;
    $obProductList = $this->ProductList->make()->active()->sort($sActiveSorting)->category($obCategoryItem->id, true);
}

//Get filters
$obPluginManager = \System\Classes\PluginManager::instance();
if ($obPluginManager->exists('Lovata.FilterShopaholic')) {

    //Get price filter
    $arPriceFilterValue = explode('|', input('price'));
    $fMinPriceFilterValue = array_get($arPriceFilterValue, 0);
    $fMaxPriceFilterValue = array_get($arPriceFilterValue, 1);

    //Get filter by properties
    $arFilterValue = (array) input('property');

    if (!empty($arFilterValue)) {
        foreach($arFilterValue as $sKey => &$sValue) {
            $sValue = explode('|', $sValue);
        }
    }

    $iPriceTypeID = \Lovata\Shopaholic\Classes\Helper\PriceTypeHelper::instance()->getActivePriceTypeID();
    $iPriceTypeCode = \Lovata\Shopaholic\Classes\Helper\PriceTypeHelper::instance()->getActivePriceTypeCode();
    $obProductPropertyList = $this->FilterPanel->getProductPropertyList(['obshchie-svojstva'], $obProductList);
    //$obProductPropertyList = $obCategory->product_filter_property;
    $obOfferPropertyList = $obCategory->offer_filter_property;
    $arFilterValueWithoutProperty = [];

    $arProductPropertyIdList = $obProductPropertyList->getIDList();
    foreach($arProductPropertyIdList as $iPropertyID) {
        $arFilterValueTemp = $arFilterValue;
        if (isset($arFilterValueTemp[$iPropertyID])) {
            unset($arFilterValueTemp[$iPropertyID]);
        }

        $arFilterValueWithoutProperty[$iPropertyID] = $arFilterValueTemp;
    }

    $obProductList = $obProductList->copy()
        ->filterByProperty($arFilterValue, $obProductPropertyList)
        ->filterByProperty($arFilterValue, $obOfferPropertyList)
        ->filterByPrice($fMinPriceFilterValue, $fMaxPriceFilterValue, $iPriceTypeID);

    $this['fMinPriceFilterValue'] = $fMinPriceFilterValue;
    $this['fMaxPriceFilterValue'] = $fMaxPriceFilterValue;

    $this['obOfferMinPrice'] = $obProductList->getOfferMinPrice($iPriceTypeCode);
    $this['obOfferMaxPrice'] = $obProductList->getOfferMaxPrice($iPriceTypeCode);

    $this['arFilterValue'] = $arFilterValue;
    $this['arFilterValueWithoutProperty'] = $arFilterValueWithoutProperty;
    $this['obProductPropertyList'] = $obProductPropertyList;
    $this['obOfferPropertyList'] = $obOfferPropertyList;
}

$arProductList = $obProductList->page($iPage, $this->Pagination->getCountPerPage());
$iMaxPage = $this->Pagination->getMaxPage($obProductList->count());
$iCount = $obProductList->count();

$this['obCategory'] = $obCategory;
$this['arProductList'] = $arProductList;
$this['obProductList'] = $obProductList;
$this['iPage'] = $iPage;
$this['iMaxPage'] = $iMaxPage;
$this['iCount'] = $iCount;
$this['sActiveSort'] = $sActiveSorting;
//$this['iNextPageCount'] = $iNextPageCount;
//$this['itemFrom'] = $iNextPageCount * $iPageFromRequest;
//$this['item'] = ($iNextPageCount * $iPageFromRequest - $iNextPageCount) + 1;
// TODO: Fix pagination

$obMainCategory = $obCategory->parent->isNotEmpty() ? $obCategory->parent : '';
$this->Breadcrumbs->set(null, $obCategory, $obMainCategory, null);
$this['arBreadcrumbs'] = $this->Breadcrumbs->get();

//$this->addJs('assets/js/filter.js');
}
==
{% put pageTitle %}
{{ obCategory.name }}
{% endput %}
<div class="main">
    {% partial 'breadcrumbs/breadcrumbs' %}
    <div class="container category catalog_wrapper">
        {% partial 'catalog/product-list' %}
    </div>
</div>
